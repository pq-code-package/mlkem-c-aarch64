/*
 * Copyright (c) 2024 The mlkem-native project authors
 * SPDX-License-Identifier: Apache-2.0
 */

#include "common.h"
#if defined(MLKEM_NATIVE_ARITH_BACKEND_AARCH64_OPT)

// Needed to provide ASM_LOAD directive
#include "common.i"
#include "params.h"

.macro barrett_reduce a
        sqdmulh t0.8h, \a\().8h, consts.h[1]
        srshr   t0.8h, t0.8h, #11
        mls     \a\().8h, t0.8h, consts.h[0]
.endm

.macro scalar_signed_to_unsigned a
        sshr mask.8h, \a\().8h, #15
        and mask.16b, modulus.16b, mask.16b
        add \a\().8h, \a\().8h, mask.8h
.endm

.macro mulmod dst, src, const, const_twisted
        sqrdmulh tmp0.8h,    \src\().8h, \const_twisted\().8h
        mul      \dst\().8h, \src\().8h, \const\().8h
        mls      \dst\().8h, tmp0.8h,    consts.h[0]
.endm

/**********************************
 *          poly_reduce()         *
 **********************************/
.global MLKEM_NAMESPACE(poly_reduce_asm_opt)
.global _MLKEM_NAMESPACE(poly_reduce_asm_opt)

.p2align 4
const_addr:
        .short 3329   // ML-KEM modulus
        .short 20159  // Barrett twist of 1 wrt 2^27
        .short -1044  // 2^16 % 3329
        .short -10276 // Barrett twist of -1044 (wrt 2^16)
        .short 0
        .short 0
        .short 0
        .short 0

        ptr    .req x0
        count  .req x1
        xtmp   .req x2
        wmodulus .req w3

        q_data .req q0
        data   .req v0
        t0     .req v1
        consts .req v2
        mask    .req v3
        modulus .req v4

MLKEM_NAMESPACE(poly_reduce_asm_opt):
_MLKEM_NAMESPACE(poly_reduce_asm_opt):

        ASM_LOAD(xtmp, const_addr)
        ld1 {consts.8h}, [xtmp]

        mov wmodulus, #3329
        dup modulus.8h, wmodulus

        mov count, #8
                                              // Instructions:    15
                                              // Expected cycles: 22
                                              // Expected IPC:    0.68

                                              // Cycle bound:     22.0
                                              // IPC bound:       0.68

                                              // Wall time:     0.04s
                                              // User time:     0.04s

                                              // ----- cycle (expected) ------>
                                              // 0                        25
                                              // |------------------------|----
        ldr q21, [x0, #48]                    // *.............................
        ldr q3, [x0, #32]                     // ..*...........................
        sqdmulh v6.8H, v21.8H, v2.H[1]        // ....*.........................
        sqdmulh v30.8H, v3.8H, v2.H[1]        // ......*.......................
        srshr v6.8H, v6.8H, #11               // ........*.....................
        srshr v30.8H, v30.8H, #11             // ..........*...................
        mls v21.8H, v6.8H, v2.H[0]            // ...........*..................
        mls v3.8H, v30.8H, v2.H[0]            // .............*................
        ldr q22, [x0], #64                    // ..............*...............
        sshr v6.8H, v21.8H, #15               // ................*.............
        sshr v30.8H, v3.8H, #15               // .................*............
        and v6.16B, v4.16B, v6.16B            // ..................*...........
        add v6.8H, v21.8H, v6.8H              // ...................*..........
        and v21.16B, v4.16B, v30.16B          // ....................*.........
        add v21.8H, v3.8H, v21.8H             // .....................*........

                                                // ------ cycle (expected) ------>
                                                // 0                        25
                                                // |------------------------|-----
        // ldr q31, [x0, #48]                     // *..............................
        // sqdmulh v24.8H, v31.8H, v2.H[1]        // ....*..........................
        // srshr v6.8H, v24.8H, #11               // ........*......................
        // mls v31.8H, v6.8H, v2.H[0]             // ...........*...................
        // ldr q30, [x0, #32]                     // ..*............................
        // sshr v16.8H, v31.8H, #15               // ................*..............
        // and v28.16B, v4.16B, v16.16B           // ..................*............
        // sqdmulh v23.8H, v30.8H, v2.H[1]        // ......*........................
        // add v6.8H, v31.8H, v28.8H              // ...................*...........
        // srshr v18.8H, v23.8H, #11              // ..........*....................
        // mls v30.8H, v18.8H, v2.H[0]            // .............*.................
        // ldr q22, [x0], #64                     // ..............*................
        // sshr v0.8H, v30.8H, #15                // .................*.............
        // and v29.16B, v4.16B, v0.16B            // ....................*..........
        // add v21.8H, v30.8H, v29.8H             // .....................*.........

        sub count, count, #1
loop_start:
                                               // Instructions:    32
                                               // Expected cycles: 36
                                               // Expected IPC:    0.89

                                               // Cycle bound:     36.0
                                               // IPC bound:       0.89

                                               // Wall time:     1.05s
                                               // User time:     1.05s

                                               // -------- cycle (expected) --------->
                                               // 0                        25
                                               // |------------------------|----------
        sqdmulh v0.8H, v22.8H, v2.H[1]         // *...................................
        str q6, [x0, #-16]                     // .*..................................
        ldr q31, [x0, #48]                     // ..e.................................
        srshr v5.8H, v0.8H, #11                // ....*...............................
        str q21, [x0, #-32]                    // .....*..............................
        sqdmulh v24.8H, v31.8H, v2.H[1]        // ......e.............................
        mls v22.8H, v5.8H, v2.H[0]             // .......*............................
        ldr q20, [x0, #-48]                    // ........*...........................
        srshr v6.8H, v24.8H, #11               // ..........e.........................
        sshr v0.8H, v22.8H, #15                // ...........*........................
        sqdmulh v21.8H, v20.8H, v2.H[1]        // ............*.......................
        mls v31.8H, v6.8H, v2.H[0]             // .............e......................
        ldr q30, [x0, #32]                     // ..............e.....................
        srshr v23.8H, v21.8H, #11              // ................*...................
        and v19.16B, v4.16B, v0.16B            // .................*..................
        sshr v16.8H, v31.8H, #15               // ..................e.................
        mls v20.8H, v23.8H, v2.H[0]            // ...................*................
        and v28.16B, v4.16B, v16.16B           // ....................e...............
        sqdmulh v23.8H, v30.8H, v2.H[1]        // .....................e..............
        add v6.8H, v31.8H, v28.8H              // ......................e.............
        add v31.8H, v22.8H, v19.8H             // .......................*............
        sshr v17.8H, v20.8H, #15               // ........................*...........
        srshr v18.8H, v23.8H, #11              // .........................e..........
        and v26.16B, v4.16B, v17.16B           // ..........................*.........
        add v7.8H, v20.8H, v26.8H              // ...........................*........
        mls v30.8H, v18.8H, v2.H[0]            // ............................e.......
        ldr q22, [x0], #64                     // .............................e......
        str q7, [x0, #-112]                    // ...............................*....
        sshr v0.8H, v30.8H, #15                // ................................e...
        str q31, [x0, #-128]                   // .................................*..
        and v29.16B, v4.16B, v0.16B            // ..................................e.
        add v21.8H, v30.8H, v29.8H             // ...................................e

                                              // ------------------------ cycle (expected) ------------------------->
                                              // 0                        25                       50
                                              // |------------------------|------------------------|-----------------
        // ldr q0, [x0], #64                    // ...........................e......'............................~....
        // sqdmulh v1.8h, v0.8h, v2.h[1]        // ..................................*.................................
        // srshr   v1.8h, v1.8h, #11            // ..~...............................'...*.............................
        // mls     v0.8h, v1.8h, v2.h[0]        // .....~............................'......*..........................
        // sshr v3.8h, v0.8h, #15               // .........~........................'..........*......................
        // and v3.16b, v4.16b, v3.16b           // ...............~..................'................*................
        // add v0.8h, v0.8h, v3.8h              // .....................~............'......................*..........
        // str q0, [x0, #-64]                   // ...............................~..'................................*
        // ldr q0, [x0, #-48]                   // ......~...........................'.......*.........................
        // sqdmulh v1.8h, v0.8h, v2.h[1]        // ..........~.......................'...........*.....................
        // srshr   v1.8h, v1.8h, #11            // ..............~...................'...............*.................
        // mls     v0.8h, v1.8h, v2.h[0]        // .................~................'..................*..............
        // sshr v3.8h, v0.8h, #15               // ......................~...........'.......................*.........
        // and v3.16b, v4.16b, v3.16b           // ........................~.........'.........................*.......
        // add v0.8h, v0.8h, v3.8h              // .........................~........'..........................*......
        // str q0, [x0, #-48]                   // .............................~....'..............................*..
        // ldr q0, [x0, #-32]                   // ............e.....................'.............~...................
        // sqdmulh v1.8h, v0.8h, v2.h[1]        // ...................e..............'....................~............
        // srshr   v1.8h, v1.8h, #11            // .......................e..........'........................~........
        // mls     v0.8h, v1.8h, v2.h[0]        // ..........................e.......'...........................~.....
        // sshr v3.8h, v0.8h, #15               // ..............................e...'...............................~.
        // and v3.16b, v4.16b, v3.16b           // ................................e.'.................................
        // add v0.8h, v0.8h, v3.8h              // .................................e'.................................
        // str q0, [x0, #-32]                   // ...~..............................'....*............................
        // ldr q0, [x0, #-16]                   // e.................................'.~...............................
        // sqdmulh v1.8h, v0.8h, v2.h[1]        // ....e.............................'.....~...........................
        // srshr   v1.8h, v1.8h, #11            // ........e.........................'.........~.......................
        // mls     v0.8h, v1.8h, v2.h[0]        // ...........e......................'............~....................
        // sshr v3.8h, v0.8h, #15               // ................e.................'.................~...............
        // and v3.16b, v4.16b, v3.16b           // ..................e...............'...................~.............
        // add v0.8h, v0.8h, v3.8h              // ....................e.............'.....................~...........
        // str q0, [x0, #-16]                   // ..................................'*................................

        sub count, count, #1
        cbnz count, loop_start
                                               // Instructions:    17
                                               // Expected cycles: 23
                                               // Expected IPC:    0.74

                                               // Cycle bound:     23.0
                                               // IPC bound:       0.74

                                               // Wall time:     0.05s
                                               // User time:     0.05s

                                               // ----- cycle (expected) ------>
                                               // 0                        25
                                               // |------------------------|----
        ldr q29, [x0, #-48]                    // *.............................
        sqdmulh v1.8H, v22.8H, v2.H[1]         // ..*...........................
        str q21, [x0, #-32]                    // ...*..........................
        sqdmulh v25.8H, v29.8H, v2.H[1]        // ....*.........................
        str q6, [x0, #-16]                     // .....*........................
        srshr v30.8H, v1.8H, #11               // ......*.......................
        srshr v20.8H, v25.8H, #11              // ........*.....................
        mls v22.8H, v30.8H, v2.H[0]            // .........*....................
        mls v29.8H, v20.8H, v2.H[0]            // ...........*..................
        sshr v24.8H, v22.8H, #15               // .............*................
        and v31.16B, v4.16B, v24.16B           // ...............*..............
        sshr v24.8H, v29.8H, #15               // ................*.............
        add v3.8H, v22.8H, v31.8H              // .................*............
        and v17.16B, v4.16B, v24.16B           // ..................*...........
        add v25.8H, v29.8H, v17.8H             // ...................*..........
        str q3, [x0, #-64]                     // ....................*.........
        str q25, [x0, #-48]                    // ......................*.......

                                                // ------ cycle (expected) ------>
                                                // 0                        25
                                                // |------------------------|-----
        // sqdmulh v0.8H, v22.8H, v2.H[1]         // ..*............................
        // str q6, [x0, #-16]                     // .....*.........................
        // srshr v5.8H, v0.8H, #11                // ......*........................
        // str q21, [x0, #-32]                    // ...*...........................
        // mls v22.8H, v5.8H, v2.H[0]             // .........*.....................
        // ldr q20, [x0, #-48]                    // *..............................
        // sshr v0.8H, v22.8H, #15                // .............*.................
        // sqdmulh v21.8H, v20.8H, v2.H[1]        // ....*..........................
        // srshr v23.8H, v21.8H, #11              // ........*......................
        // and v19.16B, v4.16B, v0.16B            // ...............*...............
        // mls v20.8H, v23.8H, v2.H[0]            // ...........*...................
        // add v31.8H, v22.8H, v19.8H             // .................*.............
        // sshr v17.8H, v20.8H, #15               // ................*..............
        // and v26.16B, v4.16B, v17.16B           // ..................*............
        // add v7.8H, v20.8H, v26.8H              // ...................*...........
        // str q7, [x0, #-48]                     // ......................*........
        // str q31, [x0, #-64]                    // ....................*..........


        ret

        .unreq ptr
        .unreq count
        .unreq xtmp
        .unreq q_data
        .unreq data
        .unreq t0
        .unreq consts
        .unreq mask
        .unreq wmodulus
        .unreq modulus

/********************************************
 *          poly_mulcache_compute()         *
 ********************************************/
.global MLKEM_NAMESPACE(poly_mulcache_compute_asm_opt)
.global _MLKEM_NAMESPACE(poly_mulcache_compute_asm_opt)

        cache_ptr  .req x0
        data_ptr   .req x1
        zeta_ptr   .req x2
        zeta_twisted_ptr   .req x3
        xtmp       .req x4

        count      .req x5

        data_odd       .req v1

        zeta           .req v2
        zeta_twisted   .req v3
        q_zeta         .req q2
        q_zeta_twisted .req q3

        q_tmp0  .req q4
        q_tmp1  .req q5
        tmp0    .req v4
        tmp1    .req v5
        consts  .req v6
        dst     .req v7
        q_dst   .req q7

MLKEM_NAMESPACE(poly_mulcache_compute_asm_opt):
_MLKEM_NAMESPACE(poly_mulcache_compute_asm_opt):
        ASM_LOAD(xtmp, const_addr)
        ld1 {consts.8h}, [xtmp]

        mov count, #(16)
                                              // Instructions:    7
                                              // Expected cycles: 12
                                              // Expected IPC:    0.58

                                              // Cycle bound:     12.0
                                              // IPC bound:       0.58

                                              // Wall time:     0.01s
                                              // User time:     0.01s

                                              // ----- cycle (expected) ------>
                                              // 0                        25
                                              // |------------------------|----
        ldr q3, [x1, #16]                     // *.............................
        ldr q1, [x1], #32                     // ..*...........................
        ldr q26, [x3], #16                    // ....*.........................
        uzp2 v30.8H, v1.8H, v3.8H             // ......*.......................
        ldr q21, [x2], #16                    // .......*......................
        sqrdmulh v3.8H, v30.8H, v26.8H        // .........*....................
        mul v26.8H, v30.8H, v21.8H            // ...........*..................

                                              // ------ cycle (expected) ------>
                                              // 0                        25
                                              // |------------------------|-----
        // ldr q30, [x1, #16]                  // *..............................
        // ldr q21, [x1], #32                  // ..*............................
        // ldr q3, [x3], #16                   // ....*..........................
        // uzp2 v24.8H, v21.8H, v30.8H         // ......*........................
        // ldr q21, [x2], #16                  // .......*.......................
        // sqrdmulh v3.8H, v24.8H, v3.8H       // .........*.....................
        // mul v26.8H, v24.8H, v21.8H          // ...........*...................

        sub count, count, #1
mulcache_compute_loop_start:
                                             // Instructions:    9
                                             // Expected cycles: 13
                                             // Expected IPC:    0.69

                                             // Cycle bound:     13.0
                                             // IPC bound:       0.69

                                             // Wall time:     0.08s
                                             // User time:     0.08s

                                             // ----- cycle (expected) ------>
                                             // 0                        25
                                             // |------------------------|----
        ldr q30, [x1, #16]                   // e.............................
        ldr q21, [x1], #32                   // ..e...........................
        mls v26.8H, v3.8H, v6.H[0]           // ....*.........................
        ldr q3, [x3], #16                    // .....e........................
        uzp2 v24.8H, v21.8H, v30.8H          // .......e......................
        ldr q21, [x2], #16                   // ........e.....................
        str q26, [x0], #16                   // ..........*...................
        sqrdmulh v3.8H, v24.8H, v3.8H        // ...........e..................
        mul v26.8H, v24.8H, v21.8H           // ............e.................

                                                  // ------ cycle (expected) ------>
                                                  // 0                        25
                                                  // |------------------------|-----
        // ldr q4, [x1], #32                       // ..e..........'.~..........'.~..
        // ldr q5, [x1, #-16]                      // e............~............~....
        // ldr q2, [x2], #16                       // ........e....'.......~....'....
        // ldr q3, [x3], #16                       // .....e.......'....~.......'....
        // uzp2 v1.8h, v4.8h, v5.8h                // .......e.....'......~.....'....
        // sqrdmulh v4.8h,    v1.8h, v3.8h         // ...........e.'..........~.'....
        // mul      v7.8h, v1.8h, v2.8h            // ............e'...........~'....
        // mls      v7.8h, v4.8h,    v6.h[0]       // ....~........'...*........'....
        // str q7, [x0], #16                       // ..........~..'.........*..'....

        sub count, count, #1
        cbnz count, mulcache_compute_loop_start
                                          // Instructions:    2
                                          // Expected cycles: 5
                                          // Expected IPC:    0.40

                                          // Cycle bound:     5.0
                                          // IPC bound:       0.40

                                          // Wall time:     0.00s
                                          // User time:     0.00s

                                          // ----- cycle (expected) ------>
                                          // 0                        25
                                          // |------------------------|----
        mls v26.8H, v3.8H, v6.H[0]        // *.............................
        str q26, [x0], #16                // ....*.........................

                                           // ------ cycle (expected) ------>
                                           // 0                        25
                                           // |------------------------|-----
        // mls v26.8H, v3.8H, v6.H[0]       // *..............................
        // str q26, [x0], #16               // ....*..........................


        ret

        .unreq cache_ptr
        .unreq data_ptr
        .unreq zeta_ptr
        .unreq xtmp
        .unreq count

        .unreq data_odd
        .unreq zeta
        .unreq q_zeta
        .unreq zeta_twisted
        .unreq q_zeta_twisted

        .unreq q_tmp0
        .unreq q_tmp1
        .unreq tmp0
        .unreq tmp1
        .unreq consts
        .unreq dst

/********************************************
 *             poly_tobytes()               *
 ********************************************/
.global MLKEM_NAMESPACE(poly_tobytes_asm_opt)
.global _MLKEM_NAMESPACE(poly_tobytes_asm_opt)

        data0 .req v0
        data1 .req v1

        out0  .req v2
        out1  .req v3
        out2  .req v4

        tmp     .req v5

        dst   .req x0
        src   .req x1
        count .req x2

MLKEM_NAMESPACE(poly_tobytes_asm_opt):
_MLKEM_NAMESPACE(poly_tobytes_asm_opt):

        mov count, #16
poly_tobytes_asm_opt_asm_loop_start:
        ld2 {data0.8h, data1.8h}, [src], #32

        // r[3 * i + 0] = (t0 >> 0);
        xtn out0.8b, data0.8h

        // r[3 * i + 1] = (t0 >> 8);
        shrn out1.8b, data0.8h, #8
        xtn tmp.8b, data1.8h
        // r[3 * i + 1] = (t0 >> 8) | (t1 << 4);
        sli out1.8b, tmp.8b, #4

        // r[3 * i + 2] = (t1 >> 4);
        shrn out2.8b, data1.8h, #4

        st3 {out0.8b, out1.8b, out2.8b}, [dst], #24

        subs count, count, #1
        cbnz count, poly_tobytes_asm_opt_asm_loop_start
        ret

        .unreq data0
        .unreq data1
        .unreq out0
        .unreq out1
        .unreq out2
        .unreq tmp
        .unreq dst
        .unreq src
        .unreq count

/********************************************
 *             poly_frombytes()             *
 ********************************************/
.global MLKEM_NAMESPACE(poly_frombytes_asm_opt)
.global _MLKEM_NAMESPACE(poly_frombytes_asm_opt)

        out0 .req v0
        out1 .req v1

        in0  .req v2
        in1  .req v3
        in2  .req v4

        dst   .req x0
        src   .req x1
        count .req x2

MLKEM_NAMESPACE(poly_frombytes_asm_opt):
_MLKEM_NAMESPACE(poly_frombytes_asm_opt):

        mov count, #16
poly_frombytes_asm_opt_asm_loop_start:
        ld3 {in0.8b, in1.8b, in2.8b}, [src], #24

        // This is little-endian specific
        // r[2 * i + 0] = t0 | (t1 << 8)
        zip1 out0.16b, in0.16b, in1.16b
        // r[2 * i + 0] = (t0 | (t1 << 8)) & 0xFFF
        bic out0.8h, #0xF0, lsl #8

        // r[2 * i + 1] = (t2 << 4), in 16-bit
        ushll out1.8h, in2.8b, #4
        // tmp = (t1 >> 4), in 8-bit
        ushr in1.8b, in1.8b, #4
        // tmp = (t1 >> 4), in 16-bit
        uxtl in1.8h, in1.8b
        // r[2 * i + 1] = (t1 >> 4) | (t2 << 4), in 16-bit
        eor out1.16b, out1.16b, in1.16b

        st2 {out0.8h, out1.8h}, [dst], #32

        subs count, count, #1
        cbnz count, poly_frombytes_asm_opt_asm_loop_start
        ret

        .unreq out0
        .unreq out1
        .unreq in0
        .unreq in1
        .unreq in2
        .unreq dst
        .unreq src
        .unreq count

/**********************************
 *          poly_tomont()         *
 **********************************/
.global MLKEM_NAMESPACE(poly_tomont_asm_opt)
.global _MLKEM_NAMESPACE(poly_tomont_asm_opt)

        src     .req x0
        count   .req x1
        xtmp    .req x2

        wtmp2   .req w3

        data    .req v0
        q_data  .req q0
        res     .req v1
        q_res   .req q1

        consts  .req v2

        factor   .req v3
        factor_t .req v4

        tmp0    .req v5

MLKEM_NAMESPACE(poly_tomont_asm_opt):
_MLKEM_NAMESPACE(poly_tomont_asm_opt):

        ASM_LOAD(xtmp, const_addr)
        ld1 {consts.8h}, [xtmp]

        ldrsh wtmp2, [xtmp, #(2*2)]
        dup factor.8h, wtmp2
        ldrh wtmp2, [xtmp, #(3*2)]
        dup factor_t.8h, wtmp2

        mov count, #8
                                            // Instructions:    5
                                            // Expected cycles: 10
                                            // Expected IPC:    0.50
                                            //
                                            // Cycle bound:     10.0
                                            // IPC bound:       0.50
                                            //
                                            // Wall time:     0.01s
                                            // User time:     0.01s
                                            //
                                            // ----- cycle (expected) ------>
                                            // 0                        25
                                            // |------------------------|----
        ldr q6, [x0, #16]                   // *.............................
        ldr q20, [x0, #32]                  // ..*...........................
        mul v21.8H, v6.8H, v3.8H            // ....*.........................
        sqrdmulh v6.8H, v6.8H, v4.8H        // .....*........................
        mls v21.8H, v6.8H, v2.H[0]          // .........*....................

                                              // ------ cycle (expected) ------>
                                              // 0                        25
                                              // |------------------------|-----
        // ldr q16, [x0, #16]                 // *..............................
        // mul v21.8H, v16.8H, v3.8H          // ....*..........................
        // sqrdmulh v0.8H, v16.8H, v4.8H      // .....*.........................
        // mls v21.8H, v0.8H, v2.H[0]         // .........*.....................
        // ldr q20, [x0, #32]                 // ..*............................

        sub count, count, #1
poly_tomont_asm_loop:
                                              // Instructions:    20
                                              // Expected cycles: 24
                                              // Expected IPC:    0.83
                                              //
                                              // Cycle bound:     24.0
                                              // IPC bound:       0.83
                                              //
                                              // Wall time:     0.58s
                                              // User time:     0.58s
                                              //
                                              // ----- cycle (expected) ------>
                                              // 0                        25
                                              // |------------------------|----
        ldr q18, [x0], #64                    // *.............................
        str q21, [x0, #-48]                   // ..*...........................
        ldr q16, [x0, #16]                    // ...e..........................
        sqrdmulh v27.8H, v20.8H, v4.8H        // .....*........................
        mul v1.8H, v20.8H, v3.8H              // ......*.......................
        mul v21.8H, v16.8H, v3.8H             // .......e......................
        sqrdmulh v0.8H, v16.8H, v4.8H         // ........e.....................
        ldr q30, [x0, #-16]                   // .........*....................
        sqrdmulh v6.8H, v18.8H, v4.8H         // ...........*..................
        mul v18.8H, v18.8H, v3.8H             // ............*.................
        mls v1.8H, v27.8H, v2.H[0]            // .............*................
        mul v5.8H, v30.8H, v3.8H              // ..............*...............
        sqrdmulh v22.8H, v30.8H, v4.8H        // ...............*..............
        mls v18.8H, v6.8H, v2.H[0]            // ................*.............
        str q1, [x0, #-32]                    // .................*............
        mls v21.8H, v0.8H, v2.H[0]            // ..................e...........
        mls v5.8H, v22.8H, v2.H[0]            // ...................*..........
        str q18, [x0, #-64]                   // ....................*.........
        ldr q20, [x0, #32]                    // .....................e........
        str q5, [x0, #-16]                    // .......................*......

                                                  // ------------- cycle (expected) ------------->
                                                  // 0                        25
                                                  // |------------------------|-------------------
        // ldr q0, [x0], #64                      // .....................*.......................
        // sqrdmulh v5.8h,    v0.8h, v4.8h        // ........~............'..........*............
        // mul      v1.8h, v0.8h, v3.8h           // .........~...........'...........*...........
        // mls      v1.8h, v5.8h,    v2.h[0]      // .............~.......'...............*.......
        // str q1, [x0, #-64]                     // .................~...'...................*...
        // ldr q0, [x0, #-48]                     // e....................'..~....................
        // sqrdmulh v5.8h,    v0.8h, v4.8h        // .....e...............'.......~...............
        // mul      v1.8h, v0.8h, v3.8h           // ....e................'......~................
        // mls      v1.8h, v5.8h,    v2.h[0]      // ...............e.....'.................~.....
        // str q1, [x0, #-48]                     // .....................'.*.....................
        // ldr q0, [x0, #-32]                     // ..................e..'....................~..
        // sqrdmulh v5.8h,    v0.8h, v4.8h        // ..~..................'....*..................
        // mul      v1.8h, v0.8h, v3.8h           // ...~.................'.....*.................
        // mls      v1.8h, v5.8h,    v2.h[0]      // ..........~..........'............*..........
        // str q1, [x0, #-32]                     // ..............~......'................*......
        // ldr q0, [x0, #-16]                     // ......~..............'........*..............
        // sqrdmulh v5.8h,    v0.8h, v4.8h        // ............~........'..............*........
        // mul      v1.8h, v0.8h, v3.8h           // ...........~.........'.............*.........
        // mls      v1.8h, v5.8h,    v2.h[0]      // ................~....'..................*....
        // str q1, [x0, #-16]                     // ....................~'......................*

        sub count, count, #1
        cbnz count, poly_tomont_asm_loop
                                              // Instructions:    15
                                              // Expected cycles: 19
                                              // Expected IPC:    0.79
                                              //
                                              // Cycle bound:     19.0
                                              // IPC bound:       0.79
                                              //
                                              // Wall time:     0.04s
                                              // User time:     0.04s
                                              //
                                              // ----- cycle (expected) ------>
                                              // 0                        25
                                              // |------------------------|----
        mul v31.8H, v20.8H, v3.8H             // *.............................
        sqrdmulh v25.8H, v20.8H, v4.8H        // .*............................
        ldr q27, [x0], #64                    // ..*...........................
        ldr q23, [x0, #-16]                   // ....*.........................
        mls v31.8H, v25.8H, v2.H[0]           // ......*.......................
        sqrdmulh v30.8H, v27.8H, v4.8H        // .......*......................
        mul v6.8H, v27.8H, v3.8H              // ........*.....................
        mul v20.8H, v23.8H, v3.8H             // .........*....................
        sqrdmulh v26.8H, v23.8H, v4.8H        // ..........*...................
        str q31, [x0, #-32]                   // ...........*..................
        mls v6.8H, v30.8H, v2.H[0]            // ............*.................
        str q21, [x0, #-48]                   // .............*................
        mls v20.8H, v26.8H, v2.H[0]           // ..............*...............
        str q6, [x0, #-64]                    // ................*.............
        str q20, [x0, #-16]                   // ..................*...........

                                               // ------ cycle (expected) ------>
                                               // 0                        25
                                               // |------------------------|-----
        // ldr q18, [x0], #64                  // ..*............................
        // str q21, [x0, #-48]                 // .............*.................
        // sqrdmulh v27.8H, v20.8H, v4.8H      // .*.............................
        // mul v1.8H, v20.8H, v3.8H            // *..............................
        // ldr q30, [x0, #-16]                 // ....*..........................
        // sqrdmulh v6.8H, v18.8H, v4.8H       // .......*.......................
        // mul v18.8H, v18.8H, v3.8H           // ........*......................
        // mls v1.8H, v27.8H, v2.H[0]          // ......*........................
        // mul v5.8H, v30.8H, v3.8H            // .........*.....................
        // sqrdmulh v22.8H, v30.8H, v4.8H      // ..........*....................
        // mls v18.8H, v6.8H, v2.H[0]          // ............*..................
        // str q1, [x0, #-32]                  // ...........*...................
        // mls v5.8H, v22.8H, v2.H[0]          // ..............*................
        // str q18, [x0, #-64]                 // ................*..............
        // str q5, [x0, #-16]                  // ..................*............


        ret

#endif /* MLKEM_NATIVE_ARITH_BACKEND_AARCH64_OPT */
