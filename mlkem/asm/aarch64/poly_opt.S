// SPDX-License-Identifier: Apache-2.0

#include "config.h"
#if defined(MLKEM_USE_AARCH64_ASM)

// Needed to provide ASM_LOAD directive
#include "common.i"

.macro barrett_reduce a
        sqdmulh t0.8h, \a\().8h, consts.h[1]
        srshr   t0.8h, t0.8h, #11
        mls     \a\().8h, t0.8h, consts.h[0]
.endm

.macro mulmod dst, src, const, const_twisted
        sqrdmulh tmp0.8h,    \src\().8h, \const_twisted\().8h
        mul      \dst\().8h, \src\().8h, \const\().8h
        mls      \dst\().8h, tmp0.8h,    consts.h[0]
.endm

/**********************************
 *          poly_reduce()         *
 **********************************/

.global poly_reduce_asm_opt
.global _poly_reduce_asm_opt

.p2align 4
const_addr:
        .short 3329   // Kyber modulus
        .short 20159  // Barrett twist of 1 wrt 2^27
        .short -1044  // 2^16 % 3329
        .short -10276 // Barrett twist of -1044 (wrt 2^16)
        .short 0
        .short 0
        .short 0
        .short 0

        ptr    .req x0
        count  .req x1
        xtmp   .req x2

        q_data .req q0
        data   .req v0
        t0     .req v1
        consts .req v2

poly_reduce_asm_opt:
_poly_reduce_asm_opt:

        ASM_LOAD(xtmp, const_addr)
        ld1 {consts.8h}, [xtmp]

        mov count, #8
                                               // Instructions:    6
                                               // Expected cycles: 14
                                               // Expected IPC:    0.43

                                               // Cycle bound:     14.0
                                               // IPC bound:       0.43

                                               // Wall time:     0.01s
                                               // User time:     0.01s

                                               // ----- cycle (expected) ------>
                                               // 0                        25
                                               // |------------------------|----
        ldr q29, [x0, #32]                     // *.............................
        ldr q30, [x0, #16]                     // .*............................
        ldr q21, [x0, #48]                     // ..*...........................
        sqdmulh v17.8H, v29.8H, v2.H[1]        // ....*.........................
        srshr v20.8H, v17.8H, #11              // .........*....................
        mls v29.8H, v20.8H, v2.H[0]            // .............*................

                                               // ------ cycle (expected) ------>
                                               // 0                        25
                                               // |------------------------|-----
        // ldr q29, [x0, #32]                    // *..............................
        // sqdmulh v6.8H, v29.8H, v2.H[1]        // ....*..........................
        // srshr v26.8H, v6.8H, #11              // .........*.....................
        // ldr q30, [x0, #16]                    // .*.............................
        // mls v29.8H, v26.8H, v2.H[0]           // .............*.................
        // ldr q21, [x0, #48]                    // ..*............................

        sub count, count, #1
loop_start:
                                               // Instructions:    20
                                               // Expected cycles: 19
                                               // Expected IPC:    1.05

                                               // Cycle bound:     19.0
                                               // IPC bound:       1.05

                                               // Wall time:     17.67s
                                               // User time:     17.67s

                                               // ----- cycle (expected) ------>
                                               // 0                        25
                                               // |------------------------|----
        sqdmulh v26.8H, v30.8H, v2.H[1]        // *.............................
        ldr q3, [x0], #64                      // *.............................
        str q29, [x0, #-32]                    // .*............................
        sqdmulh v4.8H, v21.8H, v2.H[1]         // ..*...........................
        ldr q29, [x0, #32]                     // ..e...........................
        sqdmulh v5.8H, v3.8H, v2.H[1]          // ....*.........................
        srshr v17.8H, v26.8H, #11              // .....*........................
        sqdmulh v6.8H, v29.8H, v2.H[1]         // ......e.......................
        srshr v27.8H, v4.8H, #11               // .......*......................
        mls v30.8H, v17.8H, v2.H[0]            // .........*....................
        srshr v0.8H, v5.8H, #11                // .........*....................
        mls v21.8H, v27.8H, v2.H[0]            // ...........*..................
        srshr v26.8H, v6.8H, #11               // ...........e..................
        mls v3.8H, v0.8H, v2.H[0]              // .............*................
        str q30, [x0, #-48]                    // ..............*...............
        ldr q30, [x0, #16]                     // ...............e..............
        mls v29.8H, v26.8H, v2.H[0]            // ...............e..............
        str q21, [x0, #-16]                    // ................*.............
        ldr q21, [x0, #48]                     // .................e............
        str q3, [x0, #-64]                     // ..................*...........

                                              // -------- cycle (expected) --------->
                                              // 0                        25
                                              // |------------------------|----------
        // ldr q0, [x0], #64                    // .................*..................
        // sqdmulh v1.8h, v0.8h, v2.h[1]        // ..~..............'...*..............
        // srshr   v1.8h, v1.8h, #11            // .......~.........'........*.........
        // mls     v0.8h, v1.8h, v2.h[0]        // ...........~.....'............*.....
        // str q0, [x0, #-64]                   // ................~'.................*
        // ldr q0, [x0, #-48]                   // .............e...'..............~...
        // sqdmulh v1.8h, v0.8h, v2.h[1]        // .................*..................
        // srshr   v1.8h, v1.8h, #11            // ...~.............'....*.............
        // mls     v0.8h, v1.8h, v2.h[0]        // .......~.........'........*.........
        // str q0, [x0, #-48]                   // ............~....'.............*....
        // ldr q0, [x0, #-32]                   // e................'.~................
        // sqdmulh v1.8h, v0.8h, v2.h[1]        // ....e............'.....~............
        // srshr   v1.8h, v1.8h, #11            // .........e.......'..........~.......
        // mls     v0.8h, v1.8h, v2.h[0]        // .............e...'..............~...
        // str q0, [x0, #-32]                   // .................'*.................
        // ldr q0, [x0, #-16]                   // ...............e.'................~.
        // sqdmulh v1.8h, v0.8h, v2.h[1]        // ~................'.*................
        // srshr   v1.8h, v1.8h, #11            // .....~...........'......*...........
        // mls     v0.8h, v1.8h, v2.h[0]        // .........~.......'..........*.......
        // str q0, [x0, #-16]                   // ..............~..'...............*..

        sub count, count, #1
        cbnz count, loop_start
                                               // Instructions:    14
                                               // Expected cycles: 19
                                               // Expected IPC:    0.74

                                               // Cycle bound:     19.0
                                               // IPC bound:       0.74

                                               // Wall time:     0.04s
                                               // User time:     0.04s

                                               // ----- cycle (expected) ------>
                                               // 0                        25
                                               // |------------------------|----
        sqdmulh v3.8H, v21.8H, v2.H[1]         // *.............................
        ldr q25, [x0], #64                     // *.............................
        str q29, [x0, #-32]                    // .*............................
        sqdmulh v6.8H, v30.8H, v2.H[1]         // ..*...........................
        sqdmulh v31.8H, v25.8H, v2.H[1]        // ....*.........................
        srshr v3.8H, v3.8H, #11                // .....*........................
        srshr v6.8H, v6.8H, #11                // .......*......................
        mls v21.8H, v3.8H, v2.H[0]             // .........*....................
        srshr v3.8H, v31.8H, #11               // .........*....................
        mls v30.8H, v6.8H, v2.H[0]             // ...........*..................
        mls v25.8H, v3.8H, v2.H[0]             // .............*................
        str q21, [x0, #-16]                    // ..............*...............
        str q30, [x0, #-48]                    // ................*.............
        str q25, [x0, #-64]                    // ..................*...........

                                                // ------ cycle (expected) ------>
                                                // 0                        25
                                                // |------------------------|-----
        // sqdmulh v26.8H, v30.8H, v2.H[1]        // ..*............................
        // ldr q3, [x0], #64                      // *..............................
        // str q29, [x0, #-32]                    // .*.............................
        // sqdmulh v4.8H, v21.8H, v2.H[1]         // *..............................
        // sqdmulh v5.8H, v3.8H, v2.H[1]          // ....*..........................
        // srshr v17.8H, v26.8H, #11              // .......*.......................
        // srshr v27.8H, v4.8H, #11               // .....*.........................
        // mls v30.8H, v17.8H, v2.H[0]            // ...........*...................
        // srshr v0.8H, v5.8H, #11                // .........*.....................
        // mls v21.8H, v27.8H, v2.H[0]            // .........*.....................
        // mls v3.8H, v0.8H, v2.H[0]              // .............*.................
        // str q30, [x0, #-48]                    // ................*..............
        // str q21, [x0, #-16]                    // ..............*................
        // str q3, [x0, #-64]                     // ..................*............


        ret

        .unreq ptr
        .unreq count
        .unreq xtmp
        .unreq q_data
        .unreq data
        .unreq t0
        .unreq consts

/********************************************
 *          poly_mulcache_compute()         *
 ********************************************/

.global poly_mulcache_compute_asm_opt
.global _poly_mulcache_compute_asm_opt

        cache_ptr  .req x0
        data_ptr   .req x1
        zeta_ptr   .req x2
        zeta_twisted_ptr   .req x3
        xtmp       .req x4

        count      .req x5

        data_odd       .req v1

        zeta           .req v2
        zeta_twisted   .req v3
        q_zeta         .req q2
        q_zeta_twisted .req q3

        q_tmp0  .req q4
        q_tmp1  .req q5
        tmp0    .req v4
        tmp1    .req v5
        consts  .req v6
        dst     .req v7
        q_dst   .req q7

poly_mulcache_compute_asm_opt:
_poly_mulcache_compute_asm_opt:
        ASM_LOAD(xtmp, const_addr)
        ld1 {consts.8h}, [xtmp]

        mov count, #(16)
                                               // Instructions:    7
                                               // Expected cycles: 9
                                               // Expected IPC:    0.78

                                               // Cycle bound:     9.0
                                               // IPC bound:       0.78

                                               // Wall time:     0.03s
                                               // User time:     0.03s

                                               // ----- cycle (expected) ------>
                                               // 0                        25
                                               // |------------------------|----
        ldr q3, [x1], #32                      // *.............................
        ldr q21, [x1, #-16]                    // *.............................
        ldr q30, [x3], #16                     // .*............................
        uzp2 v21.8H, v3.8H, v21.8H             // ....*.........................
        ldr q3, [x2], #16                      // ....*.........................
        sqrdmulh v20.8H, v21.8H, v30.8H        // ......*.......................
        mul v25.8H, v21.8H, v3.8H              // ........*.....................

                                                // ------ cycle (expected) ------>
                                                // 0                        25
                                                // |------------------------|-----
        // ldr q21, [x1], #32                    // *..............................
        // ldr q3, [x1, #-16]                    // *..............................
        // ldr q30, [x3], #16                    // .*.............................
        // ldr q31, [x2], #16                    // ....*..........................
        // uzp2 v21.8H, v21.8H, v3.8H            // ....*..........................
        // sqrdmulh v20.8H, v21.8H, v30.8H       // ......*........................
        // mul v25.8H, v21.8H, v31.8H            // ........*......................

        sub count, count, #1
mulcache_compute_loop_start:
                                               // Instructions:    9
                                               // Expected cycles: 9
                                               // Expected IPC:    1.00

                                               // Cycle bound:     9.0
                                               // IPC bound:       1.00

                                               // Wall time:     0.09s
                                               // User time:     0.09s

                                               // ----- cycle (expected) ------>
                                               // 0                        25
                                               // |------------------------|----
        ldr q21, [x1], #32                     // e.............................
        ldr q3, [x1, #-16]                     // e.............................
        ldr q30, [x3], #16                     // .e............................
        ldr q31, [x2], #16                     // .e............................
        mls v25.8H, v20.8H, v6.H[0]            // ..*...........................
        uzp2 v21.8H, v21.8H, v3.8H             // ....e.........................
        sqrdmulh v20.8H, v21.8H, v30.8H        // ......e.......................
        str q25, [x0], #16                     // .......*......................
        mul v25.8H, v21.8H, v31.8H             // ........e.....................

                                                  // ------ cycle (expected) ------>
                                                  // 0                        25
                                                  // |------------------------|-----
        // ldr q4, [x1], #32                       // e........~........~........~...
        // ldr q5, [x1, #-16]                      // e........~........~........~...
        // ldr q2, [x2], #16                       // .e.......'~.......'~.......'~..
        // ldr q3, [x3], #16                       // .e.......'~.......'~.......'~..
        // uzp2 v1.8h, v4.8h, v5.8h                // ....e....'...~....'...~....'...
        // sqrdmulh v4.8h,    v1.8h, v3.8h         // ......e..'.....~..'.....~..'...
        // mul      v7.8h, v1.8h, v2.8h            // ........e'.......~'.......~'...
        // mls      v7.8h, v4.8h,    v6.h[0]       // ..~......'.*......'.~......'.~.
        // str q7, [x0], #16                       // .......~.'......*.'......~.'...

        sub count, count, #1
        cbnz count, mulcache_compute_loop_start
                                           // Instructions:    2
                                           // Expected cycles: 6
                                           // Expected IPC:    0.33

                                           // Cycle bound:     6.0
                                           // IPC bound:       0.33

                                           // Wall time:     0.00s
                                           // User time:     0.00s

                                           // ----- cycle (expected) ------>
                                           // 0                        25
                                           // |------------------------|----
        mls v25.8H, v20.8H, v6.H[0]        // *.............................
        str q25, [x0], #16                 // .....*........................

                                            // ------ cycle (expected) ------>
                                            // 0                        25
                                            // |------------------------|-----
        // mls v25.8H, v20.8H, v6.H[0]       // *..............................
        // str q25, [x0], #16                // .....*.........................


        ret

        .unreq cache_ptr
        .unreq data_ptr
        .unreq zeta_ptr
        .unreq xtmp
        .unreq count

        .unreq data_odd
        .unreq zeta
        .unreq q_zeta
        .unreq zeta_twisted
        .unreq q_zeta_twisted

        .unreq q_tmp0
        .unreq q_tmp1
        .unreq tmp0
        .unreq tmp1
        .unreq consts
        .unreq dst

/********************************************
 *             poly_tobytes()               *
 ********************************************/

.global poly_tobytes_asm_opt
.global _poly_tobytes_asm_opt

        data0 .req v0
        data1 .req v1

        out0  .req v2
        out1  .req v3
        out2  .req v4

        wmodulus .req w3

        mask    .req v5
        tmp     .req v5
        modulus .req v6

        dst   .req x0
        src   .req x1
        count .req x2

.macro scalar_signed_to_unsigned a
        sshr mask.8h, \a\().8h, #15
        and mask.16b, modulus.16b, mask.16b
        add \a\().8h, \a\().8h, mask.8h
.endm

poly_tobytes_asm_opt:
_poly_tobytes_asm_opt:

        mov wmodulus, #3329
        dup modulus.8h, wmodulus

        mov count, #16
poly_tobytes_asm_opt_asm_loop_start:
        ld2 {data0.8h, data1.8h}, [src], #32

        // t0 = scalar_signed_to_unsigned_q_16(a->coeffs[2 * i]);
        scalar_signed_to_unsigned data0
        // t1 = scalar_signed_to_unsigned_q_16(a->coeffs[2 * i + 1]);
        scalar_signed_to_unsigned data1

        // r[3 * i + 0] = (t0 >> 0);
        xtn out0.8b, data0.8h

        // r[3 * i + 1] = (t0 >> 8);
        shrn out1.8b, data0.8h, #8
        xtn tmp.8b, data1.8h
        // r[3 * i + 1] = (t0 >> 8) | (t1 << 4);
        sli out1.8b, tmp.8b, #4

        // r[3 * i + 2] = (t1 >> 4);
        shrn out2.8b, data1.8h, #4

        st3 {out0.8b, out1.8b, out2.8b}, [dst], #24

        subs count, count, #1
        cbnz count, poly_tobytes_asm_opt_asm_loop_start
        ret

        .unreq data0
        .unreq data1
        .unreq out0
        .unreq out1
        .unreq out2
        .unreq wmodulus
        .unreq mask
        .unreq tmp
        .unreq modulus
        .unreq dst
        .unreq src
        .unreq count

/**********************************
 *          poly_tomont()         *
 **********************************/

.global poly_tomont_asm_opt
.global _poly_tomont_asm_opt

        src     .req x0
        count   .req x1
        xtmp    .req x2

        wtmp2   .req w3

        data    .req v0
        q_data  .req q0
        res     .req v1
        q_res   .req q1

        consts  .req v2

        factor   .req v3
        factor_t .req v4

        tmp0    .req v5

poly_tomont_asm_opt:
_poly_tomont_asm_opt:

        ASM_LOAD(xtmp, const_addr)
        ld1 {consts.8h}, [xtmp]

        ldrsh wtmp2, [xtmp, #(2*2)]
        dup factor.8h, wtmp2
        ldrh wtmp2, [xtmp, #(3*2)]
        dup factor_t.8h, wtmp2

        mov count, #8
                                              // Instructions:    4
                                              // Expected cycles: 7
                                              // Expected IPC:    0.57
                                              //
                                              // Cycle bound:     7.0
                                              // IPC bound:       0.57
                                              //
                                              // Wall time:     0.01s
                                              // User time:     0.01s
                                              //
                                              // ----- cycle (expected) ------>
                                              // 0                        25
                                              // |------------------------|----
        ldr q16, [x0, #32]                    // *.............................
        ldr q0, [x0], #64                     // *.............................
        sqrdmulh v21.8H, v0.8H, v4.8H         // ....*.........................
        sqrdmulh v18.8H, v16.8H, v4.8H        // ......*.......................

                                               // ------ cycle (expected) ------>
                                               // 0                        25
                                               // |------------------------|-----
        // ldr q16, [x0, #32]                  // *..............................
        // ldr q0, [x0], #64                   // *..............................
        // sqrdmulh v21.8H, v0.8H, v4.8H       // ....*..........................
        // sqrdmulh v18.8H, v16.8H, v4.8H      // ......*........................

        sub count, count, #1
poly_tomont_asm_loop:
                                              // Instructions:    20
                                              // Expected cycles: 24
                                              // Expected IPC:    0.83
                                              //
                                              // Cycle bound:     24.0
                                              // IPC bound:       0.83
                                              //
                                              // Wall time:     0.44s
                                              // User time:     0.44s
                                              //
                                              // ----- cycle (expected) ------>
                                              // 0                        25
                                              // |------------------------|----
        ldr q22, [x0, #-48]                   // *.............................
        mul v1.8H, v0.8H, v3.8H               // *.............................
        mul v16.8H, v16.8H, v3.8H             // ..*...........................
        ldr q20, [x0, #-16]                   // ....*.........................
        sqrdmulh v27.8H, v22.8H, v4.8H        // ....*.........................
        mul v0.8H, v22.8H, v3.8H              // ......*.......................
        mls v16.8H, v18.8H, v2.H[0]           // ........*.....................
        mls v0.8H, v27.8H, v2.H[0]            // ..........*...................
        sqrdmulh v7.8H, v20.8H, v4.8H         // ............*.................
        str q16, [x0, #-32]                   // .............*................
        mls v1.8H, v21.8H, v2.H[0]            // ..............*...............
        ldr q16, [x0, #32]                    // ..............e...............
        str q0, [x0, #-48]                    // ...............*..............
        ldr q0, [x0], #64                     // ...............e..............
        mul v17.8H, v20.8H, v3.8H             // ................*.............
        mls v17.8H, v7.8H, v2.H[0]            // ..................*...........
        str q1, [x0, #-128]                   // ...................*..........
        sqrdmulh v21.8H, v0.8H, v4.8H         // ....................e.........
        sqrdmulh v18.8H, v16.8H, v4.8H        // ......................e.......
        str q17, [x0, #-80]                   // .......................*......

                                                  // ------- cycle (expected) -------->
                                                  // 0                        25
                                                  // |------------------------|--------
        // ldr q0, [x0], #64                      // .e........'..............~........
        // sqrdmulh v5.8h,    v0.8h, v4.8h        // ......e...'...................~...
        // mul      v1.8h, v0.8h, v3.8h           // ..........*.......................
        // mls      v1.8h, v5.8h,    v2.h[0]      // ~.........'.............*.........
        // str q1, [x0, #-64]                     // .....~....'..................*....
        // ldr q0, [x0, #-48]                     // ..........*.......................
        // sqrdmulh v5.8h,    v0.8h, v4.8h        // ..........'...*...................
        // mul      v1.8h, v0.8h, v3.8h           // ..........'.....*.................
        // mls      v1.8h, v5.8h,    v2.h[0]      // ..........'.........*.............
        // str q1, [x0, #-48]                     // .~........'..............*........
        // ldr q0, [x0, #-32]                     // e.........'.............~.........
        // sqrdmulh v5.8h,    v0.8h, v4.8h        // ........e.'.....................~.
        // mul      v1.8h, v0.8h, v3.8h           // ..........'.*.....................
        // mls      v1.8h, v5.8h,    v2.h[0]      // ..........'.......*...............
        // str q1, [x0, #-32]                     // ..........'............*..........
        // ldr q0, [x0, #-16]                     // ..........'...*...................
        // sqrdmulh v5.8h,    v0.8h, v4.8h        // ..........'...........*...........
        // mul      v1.8h, v0.8h, v3.8h           // ..~.......'...............*.......
        // mls      v1.8h, v5.8h,    v2.h[0]      // ....~.....'.................*.....
        // str q1, [x0, #-16]                     // .........~'......................*

        sub count, count, #1
        cbnz count, poly_tomont_asm_loop
                                              // Instructions:    16
                                              // Expected cycles: 24
                                              // Expected IPC:    0.67
                                              //
                                              // Cycle bound:     24.0
                                              // IPC bound:       0.67
                                              //
                                              // Wall time:     0.06s
                                              // User time:     0.06s
                                              //
                                              // ----- cycle (expected) ------>
                                              // 0                        25
                                              // |------------------------|----
        mul v6.8H, v0.8H, v3.8H               // *.............................
        ldr q30, [x0, #-48]                   // *.............................
        ldr q31, [x0, #-16]                   // .*............................
        mul v25.8H, v16.8H, v3.8H             // ..*...........................
        mls v25.8H, v18.8H, v2.H[0]           // ....*.........................
        mls v6.8H, v21.8H, v2.H[0]            // ......*.......................
        sqrdmulh v21.8H, v30.8H, v4.8H        // ........*.....................
        str q25, [x0, #-32]                   // .........*....................
        mul v30.8H, v30.8H, v3.8H             // ..........*...................
        str q6, [x0, #-64]                    // ...........*..................
        sqrdmulh v6.8H, v31.8H, v4.8H         // ............*.................
        mul v31.8H, v31.8H, v3.8H             // ..............*...............
        mls v30.8H, v21.8H, v2.H[0]           // ................*.............
        mls v31.8H, v6.8H, v2.H[0]            // ..................*...........
        str q30, [x0, #-48]                   // .....................*........
        str q31, [x0, #-16]                   // .......................*......

                                               // ------ cycle (expected) ------>
                                               // 0                        25
                                               // |------------------------|-----
        // ldr q22, [x0, #-48]                 // *..............................
        // mul v1.8H, v0.8H, v3.8H             // *..............................
        // mul v16.8H, v16.8H, v3.8H           // ..*............................
        // ldr q20, [x0, #-16]                 // .*.............................
        // sqrdmulh v27.8H, v22.8H, v4.8H      // ........*......................
        // mul v0.8H, v22.8H, v3.8H            // ..........*....................
        // mls v16.8H, v18.8H, v2.H[0]         // ....*..........................
        // mls v0.8H, v27.8H, v2.H[0]          // ................*..............
        // sqrdmulh v7.8H, v20.8H, v4.8H       // ............*..................
        // str q16, [x0, #-32]                 // .........*.....................
        // mls v1.8H, v21.8H, v2.H[0]          // ......*........................
        // str q0, [x0, #-48]                  // .....................*.........
        // mul v17.8H, v20.8H, v3.8H           // ..............*................
        // mls v17.8H, v7.8H, v2.H[0]          // ..................*............
        // str q1, [x0, #-64]                  // ...........*...................
        // str q17, [x0, #-16]                 // .......................*.......


        ret

#endif /* MLKEM_USE_AARCH64_ASM */
