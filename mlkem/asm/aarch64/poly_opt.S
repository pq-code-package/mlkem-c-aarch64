// SPDX-License-Identifier: Apache-2.0

#include "config.h"
#if defined(MLKEM_USE_AARCH64_ASM)

// Needed to provide ASM_LOAD directive
#include "common.i"

.macro barrett_reduce a
        sqdmulh t0.8h, \a\().8h, consts.h[1]
        srshr   t0.8h, t0.8h, #11
        mls     \a\().8h, t0.8h, consts.h[0]
.endm

.global poly_reduce_asm_opt
.global _poly_reduce_asm_opt

.p2align 4
const_addr:
        .short 3329
        .short 20159
        .short 0
        .short 0
        .short 0
        .short 0
        .short 0
        .short 0

        ptr    .req x0
        count  .req x1
        xtmp   .req x2

        q_data .req q0
        data   .req v0
        t0     .req v1
        consts .req v2

poly_reduce_asm_opt:
_poly_reduce_asm_opt:

        ASM_LOAD(xtmp, const_addr)
        ld1 {consts.8h}, [xtmp]

        mov count, #8
                                  // Instructions:    4
                                  // Expected cycles: 7
                                  // Expected IPC:    0.57
                                  //
                                  // Cycle bound:     7.0
                                  // IPC bound:       0.57
                                  //
                                  // Wall time:     0.00s
                                  // User time:     0.00s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        ldr q9, [x0], #64         // *.............................
        ldr q8, [x0, #-48]        // ..*...........................
        ldr q1, [x0, #-32]        // ....*.........................
        ldr q3, [x0, #-16]        // ......*.......................

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // ldr q9, [x0], #64       // *..............................
        // ldr q8, [x0, #-48]      // ..*............................
        // ldr q1, [x0, #-32]      // ....*..........................
        // ldr q3, [x0, #-16]      // ......*........................

        sub count, count, #1
loop_start:
                                             // Instructions:    20
                                             // Expected cycles: 24
                                             // Expected IPC:    0.83
                                             //
                                             // Cycle bound:     24.0
                                             // IPC bound:       0.83
                                             //
                                             // Wall time:     0.09s
                                             // User time:     0.09s
                                             //
                                             // ----- cycle (expected) ------>
                                             // 0                        25
                                             // |------------------------|----
        sqdmulh v7.8H, v9.8H, v2.H[1]        // *.............................
        sqdmulh v5.8H, v8.8H, v2.H[1]        // .*............................
        sqdmulh v0.8H, v1.8H, v2.H[1]        // ..*...........................
        sqdmulh v4.8H, v3.8H, v2.H[1]        // ...*..........................
        srshr v7.8H, v7.8H, #11              // ....*.........................
        srshr v5.8H, v5.8H, #11              // .....*........................
        srshr v0.8H, v0.8H, #11              // ......*.......................
        srshr v4.8H, v4.8H, #11              // .......*......................
        mls v9.8H, v7.8H, v2.H[0]            // ........*.....................
        mls v8.8H, v5.8H, v2.H[0]            // .........*....................
        mls v1.8H, v0.8H, v2.H[0]            // ..........*...................
        mls v3.8H, v4.8H, v2.H[0]            // ...........*..................
        str q9, [x0, #-64]                   // ............*.................
        ldr q9, [x0], #64                    // .............e................
        str q8, [x0, #-112]                  // ...............*..............
        ldr q8, [x0, #-48]                   // ................e.............
        str q1, [x0, #-96]                   // ..................*...........
        ldr q1, [x0, #-32]                   // ...................e..........
        str q3, [x0, #-80]                   // .....................*........
        ldr q3, [x0, #-16]                   // ......................e.......

                                              // ------- cycle (expected) ------->
                                              // 0                        25
                                              // |------------------------|-------
        // ldr q0, [x0], #64                  // e..........'............~........
        // sqdmulh v1.8h, v0.8h, v2.h[1]      // ...........*.....................
        // srshr   v1.8h, v1.8h, #11          // ...........'...*.................
        // mls     v0.8h, v1.8h, v2.h[0]      // ...........'.......*.............
        // str q0, [x0, #-64]                 // ...........'...........*.........
        // ldr q0, [x0, #-48]                 // ...e.......'...............~.....
        // sqdmulh v1.8h, v0.8h, v2.h[1]      // ...........'*....................
        // srshr   v1.8h, v1.8h, #11          // ...........'....*................
        // mls     v0.8h, v1.8h, v2.h[0]      // ...........'........*............
        // str q0, [x0, #-48]                 // ..~........'..............*......
        // ldr q0, [x0, #-32]                 // ......e....'..................~..
        // sqdmulh v1.8h, v0.8h, v2.h[1]      // ...........'.*...................
        // srshr   v1.8h, v1.8h, #11          // ...........'.....*...............
        // mls     v0.8h, v1.8h, v2.h[0]      // ...........'.........*...........
        // str q0, [x0, #-32]                 // .....~.....'.................*...
        // ldr q0, [x0, #-16]                 // .........e.'.....................
        // sqdmulh v1.8h, v0.8h, v2.h[1]      // ...........'..*..................
        // srshr   v1.8h, v1.8h, #11          // ...........'......*..............
        // mls     v0.8h, v1.8h, v2.h[0]      // ...........'..........*..........
        // str q0, [x0, #-16]                 // ........~..'....................*

        sub count, count, #1
        cbnz count, loop_start
                                             // Instructions:    16
                                             // Expected cycles: 18
                                             // Expected IPC:    0.89
                                             //
                                             // Cycle bound:     18.0
                                             // IPC bound:       0.89
                                             //
                                             // Wall time:     0.02s
                                             // User time:     0.02s
                                             //
                                             // ----- cycle (expected) ------>
                                             // 0                        25
                                             // |------------------------|----
        sqdmulh v7.8H, v9.8H, v2.H[1]        // *.............................
        sqdmulh v5.8H, v8.8H, v2.H[1]        // .*............................
        sqdmulh v0.8H, v1.8H, v2.H[1]        // ..*...........................
        sqdmulh v4.8H, v3.8H, v2.H[1]        // ...*..........................
        srshr v7.8H, v7.8H, #11              // ....*.........................
        srshr v5.8H, v5.8H, #11              // .....*........................
        srshr v0.8H, v0.8H, #11              // ......*.......................
        mls v9.8H, v7.8H, v2.H[0]            // .......*......................
        mls v8.8H, v5.8H, v2.H[0]            // ........*.....................
        srshr v7.8H, v4.8H, #11              // .........*....................
        mls v1.8H, v0.8H, v2.H[0]            // ..........*...................
        str q9, [x0, #-64]                   // ...........*..................
        mls v3.8H, v7.8H, v2.H[0]            // ............*.................
        str q8, [x0, #-48]                   // .............*................
        str q1, [x0, #-32]                   // ...............*..............
        str q3, [x0, #-16]                   // .................*............

                                              // ------ cycle (expected) ------>
                                              // 0                        25
                                              // |------------------------|-----
        // sqdmulh v7.8H, v9.8H, v2.H[1]      // *..............................
        // sqdmulh v5.8H, v8.8H, v2.H[1]      // .*.............................
        // sqdmulh v0.8H, v1.8H, v2.H[1]      // ..*............................
        // sqdmulh v4.8H, v3.8H, v2.H[1]      // ...*...........................
        // srshr v7.8H, v7.8H, #11            // ....*..........................
        // srshr v5.8H, v5.8H, #11            // .....*.........................
        // srshr v0.8H, v0.8H, #11            // ......*........................
        // srshr v4.8H, v4.8H, #11            // .........*.....................
        // mls v9.8H, v7.8H, v2.H[0]          // .......*.......................
        // mls v8.8H, v5.8H, v2.H[0]          // ........*......................
        // mls v1.8H, v0.8H, v2.H[0]          // ..........*....................
        // mls v3.8H, v4.8H, v2.H[0]          // ............*..................
        // str q9, [x0, #-64]                 // ...........*...................
        // str q8, [x0, #-48]                 // .............*.................
        // str q1, [x0, #-32]                 // ...............*...............
        // str q3, [x0, #-16]                 // .................*.............


        ret

#endif /* MLKEM_USE_AARCH64_ASM */
