# SPDX-License-Identifier: Apache-2.0

name: Functional tests
description: Run functional tests for MLKEM-C_AArch64

inputs:
  nix-shell:
    description: Run in the specified Nix environment if exists
    default: "ci"
  custom_shell:
    description: The shell to use. Only relevant if no nix-shell specified
    default: "bash"
  cflags:
    description: CFLAGS to pass to compilation
    default: ""
  cross-prefix:
    description: Binary prefix for cross compilation
    default: ""
  opt:
    description: opt flag to pass to test script
    default: "true"
runs:
  using: composite
  steps:
      - name: Setup nix
        uses: ./.github/actions/setup-shell
        with:
          nix-shell: ${{ inputs.nix-shell }}
          custom_shell: ${{ inputs.custom_shell }}
          script: |
            ARCH=$(uname -m)
            cat >> $GITHUB_STEP_SUMMARY <<-EOF
              ## Setup
              Architecture: $ARCH
              - $(uname -a)
              - $(nix --version)
              - $(${{ inputs.cross-prefix }}gcc --version | grep -m1 "")
              - $(bash --version | grep -m1 "")
            EOF
      - name: Run functional tests
        id: func_test
        shell: ${{ env.SHELL }}
        run: |
          echo "::group::func_test"
          tests func --cross-prefix=${{ inputs.cross-prefix }} --cflags="${{ inputs.cflags }}" --opt=${{inputs.opt}} -v
          echo "::endgroup::"
      - name: Run KAT tests
        if: |
          success()
          || steps.func_test.conclusion == 'failure'
        id: kat_test
        shell: ${{ env.SHELL }}
        run: |
          echo "::group::kat_test"
          tests kat --cross-prefix=${{ inputs.cross-prefix }} --cflags="${{ inputs.cflags }}" --opt=${{inputs.opt}} -v
          echo "::endgroup::"
      - name: Run Nistkat tests
        id: nistkat_test
        if: |
          success()
          || steps.func_test.conclusion == 'failure'
          || steps.kat_test.conclusion == 'failure'
        shell: ${{ env.SHELL }}
        run: |
          echo "::group::nistkat_test"
          tests nistkat --cross-prefix=${{ inputs.cross-prefix }} --cflags="${{ inputs.cflags }}" --opt=${{inputs.opt}} -v
          echo "::endgroup::"
