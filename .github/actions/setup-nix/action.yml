# SPDX-License-Identifier: Apache-2.0

name: Setup nix
description: Setup nix

inputs:
  script:
    description: The script to be run in the nix shell
    required: false
  devShell:
    description: The name of the devShell
    required: true

runs:
  using: composite
  steps:
    - name: Pre-check nix
      id: pre-check-nix
      continue-on-error: true
      shell: bash -leo pipefail {0}
      run: |
        . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
        nix --version
        nix config show | grep -E "^trusted-users = .*$USER"
        nix config show | grep -E "^experimental-features = .*flakes"
        nix config show | grep -E "^experimental-features = .*nix-command"

        echo SHELL="$(which nix) develop --quiet .#${{ inputs.devShell }} -c bash -e {0}" >> $GITHUB_ENV
    - name: Install nix
      if: steps.pre-check-nix.outcome == 'failure'
      shell: bash -leo pipefail {0}
      run: |
        curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm \
        --extra-conf "trusted-users = root ${USER:-}" \
        --extra-conf "experimental-features = nix-command flakes"

        . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
        echo SHELL="$(which nix) develop --quiet .#${{ inputs.devShell }} -c bash -e {0}" >> $GITHUB_ENV
    - name: Post-check nix
      continue-on-error: true
      shell: bash -leo pipefail {0}
      run: |
        nix config check
    - uses: DeterminateSystems/magic-nix-cache-action@v8
      continue-on-error: true
    - name: Prepare nix dev shell
      shell: ${{ env.SHELL }}
      run: |
    - name: Dependency check
      shell: ${{ env.SHELL }}
      if: inputs.script != ''
      env:
        INPUT_SCRIPT: ${{ inputs.script }}
      run: eval "$INPUT_SCRIPT"
