# SPDX-License-Identifier: Apache-2.0

name: ci-ec2-any
on:
  workflow_dispatch:
    inputs:
      name:
        description: Alternative name of instance
        default: Graviton2
      ec2_instance_type:
        description: Type if EC2 instance to run on
        default: t4g.small
      ec2_ami:
        description: AMI ID
        type: choice
        options:
          - ubuntu-latest (x86_64)
          - ubuntu-latest (aarch64)
          - ubuntu-latest (custom AMI)
        default: ubuntu-latest (aarch64)
      ec2_ami_id:
        description: AMI ID
        default: ami-096ea6a12ea24a797
      cflags:
        description: Custom CFLAGS for compilation
        default:
      always_terminate:
        description: Indicates if instance should always be terminated, even on failure
        type: boolean
        default: true
      compile_mode:
        description: Indicates the desired compilation mode (native or cross compilation), or `all` to perform both types, or `none` to skip compilation and functional testing.
        type: choice
        options:
          - all
          - native
          - cross
          - none
        default: all
      opt:
        description: Indicates to compile and run the opt/non-opt binary or both.
        type: choice
        options:
          - all
          - opt
          - non-opt
        default: all
      cbmc:
        description: Whether to run CBMC proofs
        type: boolean
        default: false
jobs:
  ci-ec2-any:
    name: Ad-hoc CI on ${{ inputs.ec2_instance_type }}
    uses: ./.github/workflows/ci_ec2_reusable.yml
    with:
      name: ${{ inputs.name }}
      ec2_instance_type: ${{ inputs.ec2_instance_type }}
      ec2_ami: ${{ inputs.ec2_ami }}
      ec2_ami_id: ${{ inputs.ec2_ami_id }}
      cflags: ${{ inputs.cflags }}
      compile_mode: ${{ inputs.compile_mode }}
      opt: ${{ inputs.opt }}
      functest: ${{ inputs.compile_mode != 'none' }}
      kattest: ${{ inputs.compile_mode != 'none' }}
      nistkattest: ${{ inputs.compile_mode != 'none' }}
      lint: true
      cbmc: ${{ inputs.cbmc }}
      always_terminate: ${{ inputs.always_terminate }}
    secrets: inherit
