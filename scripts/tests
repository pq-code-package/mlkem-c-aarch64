#!/usr/bin/env python
# SPDX-License-Identifier: Apache-2.0

import platform
import subprocess
import logging
import click
import hashlib
from functools import reduce


def config_logger(verbose):
    if verbose:
        logging.basicConfig(format="%(levelname)-5s > %(message)s", level=logging.DEBUG)
    else:
        logging.basicConfig(format="%(levelname)-5s > %(message)s", level=logging.INFO)


def base_run(bin, verbose):
    if platform.system() == "Linux" and platform.machine() == "x86_64":
        logging.info(f"Emulating {bin} with QEMU")

        p = subprocess.run(
            ["make", "CROSS_PREFIX=aarch64-none-linux-gnu-", f"{bin}"],
            stdout=subprocess.DEVNULL if not verbose else None,
        )
        if p.returncode != 0:
            logging.error("make failed")
            sys.exit(1)

        result = subprocess.run(
            ["qemu-aarch64", f"{bin}"],
            capture_output=True,
            universal_newlines=False,
        )

    else:
        logging.info(f"Running {bin} natively")

        p = subprocess.run(
            ["make", f"{bin}"],
            stdout=subprocess.DEVNULL if not verbose else None,
        )
        if p.returncode != 0:
            logging.error("make failed")
            sys.exit(1)

        result = subprocess.run(
            [f"./{bin}"],
            capture_output=True,
            universal_newlines=False,
        )

    return result.stdout


_shared_options = [
    click.option(
        "-v",
        "--verbose",
        is_flag=True,
        show_default=True,
        default=False,
        type=bool,
        help="Show verbose output or not",
    ),
]


def add_options(options):
    return lambda func: reduce(lambda f, o: o(f), reversed(options), func)


@click.command(
    short_help="Run the specified binary file",
    context_settings={"show_default": True},
)
@add_options(_shared_options)
@click.option(
    "-b",
    "--bin",
    type=click.Path(),
    help="The binary file that you wanted to test.",
)
def run(bin, verbose):
    config_logger(verbose)

    result = base_run(bin, verbose)
    logging.info(str(result, encoding="utf-8"))


@click.command(
    short_help="Run the functional tests for all parameter sets",
    context_settings={"show_default": True},
)
@add_options(_shared_options)
def func(verbose):
    config_logger(verbose)

    bins = ["bin/test_kyber512", "bin/test_kyber768", "bin/test_kyber1024"]

    for bin in bins:
        result = base_run(bin, verbose)

        logging.info("\n\n" + str(result, encoding="utf-8"))


@click.command(
    short_help="Run the nistkat tests for all parameter sets",
    context_settings={"show_default": True},
)
@add_options(_shared_options)
def nistkat(verbose):
    config_logger(verbose)

    bins = ["bin/gen_NISTKAT512", "bin/gen_NISTKAT768", "bin/gen_NISTKAT1024"]

    for bin in bins:
        result = base_run(bin, verbose)

        m = hashlib.sha256()
        m.update(result)
        logging.info(m.hexdigest())


@click.command(
    short_help="Run the kat tests for all parameter sets",
    context_settings={"show_default": True},
)
@add_options(_shared_options)
def kat(verbose):
    config_logger(verbose)

    bins = ["bin/gen_KAT512", "bin/gen_KAT768", "bin/gen_KAT1024"]

    for bin in bins:
        result = base_run(bin, verbose)

        m = hashlib.sha256()
        m.update(result)
        logging.info(m.hexdigest())


@click.group(invoke_without_command=True)
def cli():
    pass


cli.add_command(run)
cli.add_command(func)
cli.add_command(nistkat)
cli.add_command(kat)

if __name__ == "__main__":
    cli()
