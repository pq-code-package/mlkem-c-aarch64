#!/usr/bin/env bash
# SPDX-License-Identifier: Apache-2.0

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

# consts
ROOT="$(realpath "$(dirname "$0")"/../../)"
GITHUB_STEP_SUMMARY=${GITHUB_STEP_SUMMARY:-/dev/stdout}

checkerr()
{
  local code=$?
  local title="$1"
  local out="$2"
  local success=true
  if [[ $code == 127 ]]; then
    success=false
  fi

  if [[ ${#out} != 0 ]]; then
    echo "$out" | while read -r file line; do
      echo "::error file=$file,line=${line:-1},title=Format error::$file require to be formatted"
    done
    success=false
  fi

  if $success; then
    echo ":white_check_mark: $title" >>"$GITHUB_STEP_SUMMARY"
  else
    SUCCESS=false
    echo ":x: $title" >>"$GITHUB_STEP_SUMMARY"
  fi
}

# Formatting
SUCCESS=true

echo "::group::Linting nix files with nixpkgs-fmt"
checkerr "Lint nix" "$(nixpkgs-fmt --check "$ROOT")"
echo "::endgroup::"

echo "::group::Linting shell scripts with shfmt"
checkerr "Lint shell" "$(shfmt -s -l -i 2 -ci -fn $(shfmt -f $(git grep -l '' :/)))"
echo "::endgroup::"

echo "::group::Linting python scripts with black"
if ! diff=$(black --check --diff -q --include scripts/tests "$ROOT"); then
  echo "::error title=Format error::$diff"
  SUCCESS=false
  echo ":x: Lint python" >>"$GITHUB_STEP_SUMMARY"
else
  echo ":white_check_mark: Lint Python" >>"$GITHUB_STEP_SUMMARY"
fi
echo "::endgroup::"

echo "::group::Linting c files with clang-format"
checkerr "Lint C" "$(clang-format $(git ls-files ":/*.c" ":/*.h") --Werror --dry-run 2>&1 | grep "error:" | cut -d ':' -f 1,2 | tr ':' ' ')"
echo "::endgroup::"

check-eol-dry-run()
{
  for file in $(git ls-files -- ":/"); do
    if [[ $(tail -c1 "$file" | wc -l) == 0 ]]; then
      l=$(wc -l <"$file")
      echo "$file $l"
    fi
  done
}
echo "::group::Checking eol"
checkerr "Check eol" "$(check-eol-dry-run)"
echo "::endgroup::"

check-spdx()
{
  local success=true
  for file in $(git ls-files -- ":/" ":/!:*.json" ":/!:*LICENSE*" ":/!:.git*" ":/!:flake.lock"); do
    if [[ $(grep "SPDX-License-Identifier:" $file | wc -l) == 0 ]]; then
      echo "::error file=$file,line=${line:-1},title=Missing license header error::$file is missing SPDX License header"
      success=false
    fi
  done

  if $success; then
    echo ":white_check_mark: Check SPDX" >>"$GITHUB_STEP_SUMMARY"
  else
    SUCCESS=false
    echo ":x: Check SPDX" >>"$GITHUB_STEP_SUMMARY"
  fi
}
echo "::group::Checking SPDX headers"
check-spdx
echo "::endgroup::"

#
if ! $SUCCESS; then
  exit 1
fi
